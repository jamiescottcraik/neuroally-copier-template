name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.2" # Use your preferred version or 'latest'
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run pre-commit hooks (lint/format/check)
        run: |
          poetry run pre-commit install
          poetry run pre-commit run --all-files --show-diff-on-failure

      - name: Run Ruff (lint)
        run: poetry run ruff check .

      - name: Run Black (format)
        run: poetry run black --check .

      - name: Run Mypy (type checks)
        run: poetry run mypy src/

      - name: Run tests (pytest + coverage)
        run: poetry run pytest --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image (CPU)
        run: docker build -f Dockerfile.cpu -t neuroally:cpu .

      - name: Build Docker image (GPU)
        run: |
          echo "::notice::GPU image build is for Dockerfile syntax and manifest only; not tested on actual GPU hardware."
          docker build -f Dockerfile.gpu -t neuroally:gpu .

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-docs-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-docs-${{ runner.os }}-3.11-

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.2"
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build Docs (MkDocs)
        run: poetry run mkdocs build

      - name: Deploy Docs to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
