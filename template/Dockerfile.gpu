# Stage 1: Builder - install dependencies and build app
FROM nvidia/cuda:12.2.0-runtime-ubuntu22.04 AS builder

WORKDIR /app

# Install system dependencies including CUDA libs for runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 python3-pip python3-venv python3-dev \
    build-essential curl git \
    libcuda1-515 libcudnn8 libcudnn8-dev libnccl2 libnccl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -

ENV PATH="/root/.local/bin:$PATH"
ENV PYTHONUNBUFFERED=1

# Copy only dependency files first for caching
COPY pyproject.toml poetry.lock* /app/

# Install project dependencies without dev packages
RUN poetry config virtualenvs.create false \
 && poetry install --no-interaction --no-ansi --no-root --only main

# Copy source code
COPY . /app/

# Stage 2: Final runtime image
FROM nvidia/cuda:12.2.0-runtime-ubuntu22.04

WORKDIR /app

# Install runtime system dependencies needed for CUDA and Python
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 python3-pip python3-venv python3-dev \
    libcuda1-515 libcudnn8 libnccl2 \
    && rm -rf /var/lib/apt/lists/*

# Copy installed packages and source from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /app /app

# Create non-root user
RUN groupadd --gid 1000 appgroup && \
    useradd --uid 1000 --gid appgroup --shell /bin/bash --create-home appuser && \
    chown -R appuser:appgroup /app

USER appuser

ENV PYTHONUNBUFFERED=1

# Expose ports if needed (adjust accordingly)
# EXPOSE 8000

# Default command to run your app
CMD ["python", "src/main.py"]
